
pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
        mvn 'mvn'
    }
    environment {
        DOCKER_IMAGE = "ashupop2/spring-boot:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        // REGISTRY_CREDENTIALS = credentials('docker-cred')
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/ashutoshdb/Jenkins-pipelines.git'
            }
        }
        stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
     //                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar '  this way we can run using maven
                    sd 'cd spring-boot-app'
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Springboot \
                    -Dsonar.projectKey=Springboot '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
                }
            } 
        }

        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan target/ ', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        // stage('Publish OWASP Dependency Check Report') {
        //     steps {
        //         publishHTML(target: [
        //             allowMissing: false,
        //             alwaysLinkToLastBuild: true,
        //             keepAll: true,
        //             reportDir: 'target',
        //             reportFiles: 'dependency-check-report.html',
        //             reportName: 'OWASP Dependency Check Report'
        //         ])
        //     }
        // }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Build and Push Docker Image') {
 
            steps {
            script {
                sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                def dockerImage = docker.image("${DOCKER_IMAGE}")
                // Does NOT build or pull the imageâ€”it only creates an object representing the image.
                withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                    dockerImage.push()
                }
            }
        }
    }
        stage("TRIVY"){
            steps{
                sh "trivy image "${DOCKER_IMAGE}" > trivyimage.txt" 
            }
        }


        // stage("Docker Build & Push"){
        //     steps{
        //         script{
        //            withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
        //                sh "docker build -t Spring-boot-app ."
        //                sh "docker tag netflix ashupop2/netflix:latest "
        //                sh "docker push ashupop2/netflix:latest "
        //             }
        //         }
        //     }
        // }
        // stage('Deploy to container'){
        //     steps{
        //         sh 'docker run -d --name springboot-"${BUILD_NUMBER}" -p 8081:80 nasi101/netflix:latest'
        //     }
        // }
    }
}
